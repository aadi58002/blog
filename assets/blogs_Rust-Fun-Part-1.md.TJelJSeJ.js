import{_ as a,c as s,o as e,a5 as i}from"./chunks/framework.D7ootnaT.js";const b=JSON.parse('{"title":"Rust Fun (Part 1)(Macros)","description":"The first part of fun tasks planned for the Rust fun series","frontmatter":{"title":"Rust Fun (Part 1)(Macros)","description":"The first part of fun tasks planned for the Rust fun series","production":true,"tags":["Rust","Projects","Fun"]},"headers":[],"relativePath":"blogs/Rust-Fun-Part-1.md","filePath":"blogs/Rust-Fun-Part-1.md","lastUpdated":1719650935000}'),t={name:"blogs/Rust-Fun-Part-1.md"},n=i(`<nav class="table-of-contents"><ul></ul></nav><hr><h1 id="what-we-are-doing" tabindex="-1">What we are doing? <a class="header-anchor" href="#what-we-are-doing" aria-label="Permalink to &quot;What we are doing?&quot;">​</a></h1><p>For example below is a list of things which don&#39;t take much time to implement and can be fun to achieve and learn with.</p><ul><li>[-] Write a rust proc macro which takes away or adds some fields to a struct. <ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Remove all fields from a struct/enum. (Derive Macro)</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> Remove all String type fields from a struct. (Derive Macro)</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> Wrap all the type wrapped in Option if there is a <code>#[option]</code> attribute on the field. (Derive attribute macro)</li></ul></li></ul><hr><h1 id="setting-up-a-basic-setup" tabindex="-1">Setting up a basic setup <a class="header-anchor" href="#setting-up-a-basic-setup" aria-label="Permalink to &quot;Setting up a basic setup&quot;">​</a></h1><p>We create a library crate with <code>cargo new --lib break_macro</code>. To tell rust tooling that we are making a proc macro we have to add the below line to <code>Cargo.toml</code></p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">proc-macro = true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Oh and if you tried to write tests in the same file as the proc macro ( <code>src/lib.rs</code> in our case ) you might have already gotten a error saying that you can&#39;t use the macro. Macro <strong>can&#39;t</strong> be used in the same crate they are defined in.<br> So test it we will have to use the <code>tests</code> folder in rust.</p><p>I would recommend that you read the below chapter from rust lang docs. <a href="https://doc.rust-lang.org/reference/procedural-macros.html" target="_blank" rel="noreferrer">Procedural Macros - The Rust Reference</a></p><hr><h1 id="clear-macro" tabindex="-1">Clear macro <a class="header-anchor" href="#clear-macro" aria-label="Permalink to &quot;Clear macro&quot;">​</a></h1><p>You can check out the clear macro code at <a href="https://github.com/aadi58002/rust-fun-series/blob/c03290f2262a19620de61509ebd7ed3776c90dcf/break_macro/src/lib.rs#L7-L17" target="_blank" rel="noreferrer">Rust Fun Series part 1 Macros Clear Macro</a></p><p>Looking at the input (DeriveInput struct struture) we can see that its <code>input.data</code> field contains all the fields.</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DeriveInput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> attrs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Visibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ident</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Ident</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> generics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Generics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Looking at the <code>Data</code> type of the struct it is a enum with 3 possible values.</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataUnion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Looking at DataStruct we can easily see that all the fields are contained in the fields property so we just have to make the fields empty. Similarly it can be done for the enum but you will have to look which field to make empty yourself.</p><hr><h1 id="clear-string-macro" tabindex="-1">Clear String macro <a class="header-anchor" href="#clear-string-macro" aria-label="Permalink to &quot;Clear String macro&quot;">​</a></h1><p>You can check out the clear String macro code at <a href="https://github.com/aadi58002/rust-fun-series/blob/f43a67b03e0f9aa8d723cac0305645c5655db304/break_macro/src/lib.rs#L20-L99" target="_blank" rel="noreferrer">Rust Fun Series part 1 Macros Clear String Macro</a></p><hr><h1 id="extra" tabindex="-1">Extra <a class="header-anchor" href="#extra" aria-label="Permalink to &quot;Extra&quot;">​</a></h1><hr><p>Proc macros are a really fun and interesting topic related to rust.</p><p>Did you know there that (looking at the options from <code>rustc --crate-type</code> flag) there are <em>6</em> different type of compilation modes in which the rust compiler can output a file in.</p><p><code>bin, dylib, lib, proc-macro, rlib, staticlib</code></p><p>Each of the above binary types are a huge topic on there own but you should explore them on there own.<br> There is also a hint here (looking at you <code>rlib</code>) from which you can figure out some of the working of cargo and how it manages your project.</p><ul><li><a href="https://youtu.be/LQ2rX5B0DUA?t=2996" target="_blank" rel="noreferrer">Tsoding daily - Forbidden rust stream around 50 min mark</a></li><li><a href="https://github.com/dtolnay/proc-macro-workshop" target="_blank" rel="noreferrer">Proc macro workshop by dtolnay</a></li><li><a href="https://youtu.be/geovSK3wMB8" target="_blank" rel="noreferrer">Proc macro workshop youtube stream by Jon Gjengset</a></li></ul>`,30),r=[n];function l(h,p,o,c,d,k){return e(),s("div",null,r)}const g=a(t,[["render",l]]);export{b as __pageData,g as default};
